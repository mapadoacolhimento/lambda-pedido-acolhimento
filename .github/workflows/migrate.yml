name: Prisma Migrate

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - "**"
    paths:
      - "prisma/migrations/**"

  push:
    branches:
      - "main"
    paths:
      - "prisma/migrations/**"

env:
  LOCAL_DATABASE_URL: postgresql://user:password@localhost:5432/mapa-org

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    strategy:
      matrix:
        node-version: [18.x]
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps TCP port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Push current migrations to test database
        run: pnpm run db:push
        env:
          DATABASE_URL: ${{ env.LOCAL_DATABASE_URL }}

      - name: Check migrations diff between remote and local databases
        id: diff
        run: pnpm run migrate:diff --from-url $REMOTE_DATABASE_URL --to-url $LOCAL_DATABASE_URL --exit-code
        env:
          REMOTE_DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Apply all pending migrations to the database
        if: ${{ success() && steps.diff.conclusion == 'success' }}
        run: pnpm run migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
